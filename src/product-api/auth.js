const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { sql, poolPromise } = require("./db");
require("dotenv").config();

const router = express.Router();
const SECRET_KEY = "mysecretkey"; // Thay b·∫±ng key b·∫£o m·∫≠t c·ªßa b·∫°n

// üü¢ API ƒêƒÉng K√Ω
router.post("/signup", async (req, res) => {
    try {
        const { first_name, last_name, email, password, phone } = req.body;
        console.log("üì• ƒêƒÉng k√Ω ng∆∞·ªùi d√πng:", email);

        const pool = await poolPromise;

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const checkUser = await pool.request()
            .input("email", sql.NVarChar, email)
            .query("SELECT * FROM users WHERE email = @email");

        if (checkUser.recordset.length > 0) {
            return res.status(400).json({ error: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // L∆∞u user v√†o database
        await pool.request()
            .input("id", sql.VarChar, Date.now().toString())
            .input("first_name", sql.NVarChar, first_name)
            .input("last_name", sql.NVarChar, last_name)
            .input("email", sql.NVarChar, email)
            .input("password", sql.NVarChar, hashedPassword)
            .input("phone", sql.NVarChar, phone)
            .query("INSERT INTO users (id, first_name, last_name, email, password, phone) VALUES (@id, @first_name, @last_name, @email, @password, @phone)");

        console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:", email);
        res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
    } catch (error) {
        console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error.message);
        res.status(500).json({ error: error.message });
    }
});



// üü¢ API ƒêƒÉng Nh·∫≠p
router.post("/login", async (req, res) => {
    try {
        const { email, password } = req.body;
        const pool = await poolPromise;

        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await pool.request()
            .input("email", sql.NVarChar, email)
            .query("SELECT * FROM users WHERE email = @email");

        if (user.recordset.length === 0) {
            return res.status(400).json({ error: "Email kh√¥ng t·ªìn t·∫°i!" });
        }

        const validPassword = await bcrypt.compare(password, user.recordset[0].password);
        if (!validPassword) {
            return res.status(400).json({ error: "Sai m·∫≠t kh·∫©u!" });
        }

        // T·∫°o token JWT
        const token = jwt.sign({ id: user.recordset[0].id }, SECRET_KEY, { expiresIn: "1h" });

        res.json({ token, user: user.recordset[0] });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// üü¢ API L·∫•y Th√¥ng Tin User
router.get("/me", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];

        if (!token) return res.status(401).json({ error: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" });

        const decoded = jwt.verify(token, SECRET_KEY);
        const pool = await poolPromise;

        const user = await pool.request()
            .input("id", sql.VarChar, decoded.id)
            .query("SELECT id, first_name, last_name, email, phone, wallet_address FROM users WHERE id = @id");

        res.json(user.recordset[0]);
    } catch (error) {
        res.status(401).json({ error: "Token kh√¥ng h·ª£p l·ªá!" });
    }
});

// üü¢ API C·∫≠p Nh·∫≠t User
router.put("/update", async (req, res) => {
    try {
        const { email, phone, wallet_address } = req.body;
        const token = req.headers.authorization?.split(" ")[1];

        if (!token) return res.status(401).json({ error: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" });

        const decoded = jwt.verify(token, SECRET_KEY);
        const pool = await poolPromise;

        await pool.request()
            .input("id", sql.VarChar, decoded.id)
            .input("email", sql.NVarChar, email)
            .input("phone", sql.NVarChar, phone)
            .input("wallet_address", sql.NVarChar, wallet_address)
            .query("UPDATE users SET email=@email, phone=@phone, wallet_address=@wallet_address WHERE id=@id");

        res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;
